dnl Process this file with autoconf to produce a configure script.
dnl Created by Anjuta application wizard.

AC_INIT(configure.in)
AM_INIT_AUTOMAKE(gnome-mplayer, 0.9.5)
AM_CONFIG_HEADER(config.h)
AM_MAINTAINER_MODE

AC_ISC_POSIX
AC_PROG_CC
AM_PROG_CC_STDC
AC_HEADER_STDC


AC_PROG_CPP
AC_PROG_CXX



dnl Set gettext package name
GETTEXT_PACKAGE=gnome-mplayer
AC_SUBST(GETTEXT_PACKAGE)
AC_DEFINE_UNQUOTED(GETTEXT_PACKAGE,"$GETTEXT_PACKAGE", [GETTEXT package name])

dnl Add the languages which your application supports here.
ALL_LINGUAS="bg de en es fr it ja ko pl pt_BR ro ru sr sr@latin sv tr zh_CN zh_HK zh_TW"
AC_SUBST(ALL_LINGUAS)
AM_GLIB_GNU_GETTEXT

PKG_CHECK_MODULES(GTK, [gtk+-2.0 glib-2.0 gthread-2.0])
AC_SUBST(GTK_CFLAGS)
AC_SUBST(GTK_LIBS)

PKG_CHECK_MODULES(GTK2_12,[gtk+-2.0 >= 2.12.0],[GTK2_12_DEFINES="-DGTK2_12_ENABLED" AC_DEFINE([GTK2_12_ENABLED],[1],[Define to 1 if you have GTK 2.12 or higher])],AC_MSG_NOTICE([Using slider for volume]))
AC_SUBST(GTK2_12_DEFINES)

PKG_CHECK_MODULES(GLIB2_14,[glib-2.0 >= 2.14.0],[GLIB2_14_DEFINES="-DGLIB2_14_ENABLED" AC_DEFINE([GLIB2_14_ENABLED],[1],[Define to 1 if you have GLIB 2.14 or higher])],AC_MSG_NOTICE([Using slider for volume]))
AC_SUBST(GLIB2_14_DEFINES)

AC_ARG_WITH([gio],
    [AS_HELP_STRING([--with-gio],
        [Use GIO for file I/O])],
        [],
        [with_gio=check])
AS_IF([test "x$with_gio" != xno], 
    [PKG_CHECK_MODULES(GIO,[gio-2.0],[GIO_DEFINES="-DGIO_ENABLED" AC_DEFINE([GIO_ENABLED],[1],[Define to 1 if you have GIO support])],AC_MSG_WARN([Compiling without gio support]))
    AC_SUBST(GIO_DEFINES)
    AC_SUBST(GIO_CFLAGS)
    AC_SUBST(GIO_LIBS)
    ])
    
PKG_CHECK_MODULES(DBUS, [dbus-1 >= 0.95 dbus-glib-1 >= 0.70])
AC_SUBST(DBUS_CFLAGS)
AC_SUBST(DBUS_LIBS)

AM_GCONF_SOURCE_2
AC_ARG_WITH([gconf],
    [AS_HELP_STRING([--with-gconf],
        [Use Gconf to store preferences])],
        [],
        [with_gconf=check])
AS_IF([test "x$with_gconf" != xno],        
    [PKG_CHECK_MODULES(GCONF, [gconf-2.0],[GCONF_DEFINES="-DHAVE_GCONF" AC_DEFINE([HAVE_GCONF],[1],[Define to 1 to use GConf to store preferences])],AC_MSG_NOTICE([Using keystore for preferences]))
    AC_SUBST(GCONF_DEFINES)
    AC_SUBST(GCONF_CFLAGS)
    AC_SUBST(GCONF_LIBS)
    ])

AC_ARG_WITH([alsa],
    [AS_HELP_STRING([--with-alsa],
        [Read volume from alsa devices])],
        [],
        [with_alsa=check])
AS_IF([test "x$with_alsa" != xno], 
    [PKG_CHECK_MODULES(ALSA, [alsa], [ALSA_DEFINES="-DHAVE_ASOUNDLIB" AC_DEFINE([HAVE_ASOUNDLIB],[1],[Define to 1 if you have asoundlib development packages])],AC_MSG_WARN([Compiling without asound support]))
    AC_SUBST(ALSA_DEFINES)
    AC_SUBST(ALSA_CFLAGS)
    AC_SUBST(ALSA_LIBS)
    ])
    
AC_ARG_WITH([libnotify],
    [AS_HELP_STRING([--with-libnotify],
        [Send notifications of new media])],
        [],
        [with_libnotify=check])
AS_IF([test "x$with_libnotify" != xno], 
    [PKG_CHECK_MODULES(NOTIFY,[libnotify],[NOTIFY_DEFINES="-DNOTIFY_ENABLED" AC_DEFINE([NOTIFY_ENABLED],[1],[Define to 1 if you have NOTIFY support])],AC_MSG_WARN([Compiling without libnotify support]))
    AC_SUBST(NOTIFY_DEFINES)
    AC_SUBST(NOTIFY_CFLAGS)
    AC_SUBST(NOTIFY_LIBS)
    ])

AC_ARG_WITH([libgpod],
    [AS_HELP_STRING([--with-libgpod],
        [Add support for libgpod])],
        [],
        [with_libgpod=check])
AS_IF([test "x$with_libgpod" != xno], 
    [PKG_CHECK_MODULES(GPOD06,[libgpod-1.0 <= 0.6.0],[GPOD_DEFINES="-DHAVE_GPOD -DGPOD_06" AC_DEFINE([GPOD_ENABLED],[1],[Define to 1 if you have gpod support])],AC_MSG_WARN([Compiling without libgpod 0.6.0 support]))
    AC_SUBST(GPOD_DEFINES)
    AC_SUBST(GPOD06_CFLAGS)
    AC_SUBST(GPOD06_LIBS)
    ])

AS_IF([test "x$with_libgpod" != xno], 
    [PKG_CHECK_MODULES(GPOD07,[libgpod-1.0 >= 0.7.0],[GPOD_DEFINES="-DHAVE_GPOD -DGPOD_07" AC_DEFINE([GPOD_ENABLED],[1],[Define to 1 if you have gpod support])],AC_MSG_WARN([Compiling without libgpod 0.7.0 support]))
    AC_SUBST(GPOD_DEFINES)
    AC_SUBST(GPOD07_CFLAGS)
    AC_SUBST(GPOD07_LIBS)
    ])
    
GPOD_CFLAGS="$GPOD06_CFLAGS $GPOD07_CFLAGS"
GPOD_LIBS="$GPOD06_LIBS $GPOD07_LIBS"    
AC_SUBST(GPOD_CFLAGS)
AC_SUBST(GPOD_LIBS)    
    
AC_ARG_WITH([libmusicbrainz3],
    [AS_HELP_STRING([--with-libmusicbrainz3],
        [Add support for libmusicbrainz3])],
        [],
        [with_libmusicbrainz3=check])
AS_IF([test "x$with_libmusicbrainz3" != xno], 
    [PKG_CHECK_MODULES(MUSICBRAINZ,[libmusicbrainz3 libcurl],[MUSICBRAINZ_DEFINES="-DHAVE_MUSICBRAINZ" AC_DEFINE([MUSICBRAINZ_ENABLED],[1],[Define to 1 if you have musicbrainz3 support])],AC_MSG_WARN([Compiling without libmusicbrainz3 support]))
    AC_SUBST(MUSICBRAINZ_DEFINES)
    AC_SUBST(MUSICBRAINZ_CFLAGS)
    AC_SUBST(MUSICBRAINZ_LIBS)
    ])    
    
AC_CHECK_HEADERS([mntent.h])
AC_OUTPUT([
Makefile
src/Makefile
po/Makefile.in
gnome-mplayer.spec
])
