dnl Process this file with autoconf to produce a configure script.
dnl Created by Anjuta application wizard.

AC_INIT(configure.in)
AM_INIT_AUTOMAKE(gnome-mplayer, 0.9.9)
AM_CONFIG_HEADER(config.h)
AM_MAINTAINER_MODE

AC_ISC_POSIX
AC_PROG_CC
AM_PROG_CC_STDC
AC_HEADER_STDC


AC_PROG_CPP
AC_PROG_CXX
AM_PROG_CC_C_O
AC_PROG_RANLIB

dnl Set gettext package name
GETTEXT_PACKAGE=gnome-mplayer
AC_SUBST(GETTEXT_PACKAGE)
AC_DEFINE_UNQUOTED(GETTEXT_PACKAGE,"$GETTEXT_PACKAGE", [GETTEXT package name])

dnl Add the languages which your application supports here.
ALL_LINGUAS="bg cs de el en en_GB es fr hu it ja ko lt nl pl pt_BR ro ru sr sr@latin sv tr zh_CN zh_HK zh_TW"
AC_SUBST(ALL_LINGUAS)
AM_GLIB_GNU_GETTEXT

PKG_CHECK_MODULES([X11], [x11])
AC_SUBST(X11_LIBS)

PKG_CHECK_MODULES(GTK, [gtk+-2.0 glib-2.0 gthread-2.0])
AC_SUBST(GTK_CFLAGS)
AC_SUBST(GTK_LIBS)

PKG_CHECK_MODULES(GLIB, [glib-2.0])
AC_SUBST(GLIB_CFLAGS)
AC_SUBST(GLIB_LIBS)

PKG_CHECK_MODULES(GTK2_12,[gtk+-2.0 >= 2.12.0],[GTK2_12_DEFINES="-DGTK2_12_ENABLED" AC_DEFINE([GTK2_12_ENABLED],[1],[Define to 1 if you have GTK 2.12 or higher])],AC_MSG_NOTICE([Using slider for volume]))
AC_SUBST(GTK2_12_DEFINES)

PKG_CHECK_MODULES(GTK2_14,[gtk+-2.0 >= 2.14.0],[GTK2_14_DEFINES="-DGTK2_14_ENABLED" AC_DEFINE([GTK2_14_ENABLED],[1],[Define to 1 if you have GTK 2.14 or higher])],AC_MSG_NOTICE([gtk_show_uti disabled]))
AC_SUBST(GTK2_14_DEFINES)

PKG_CHECK_MODULES(GLIB2_14,[glib-2.0 >= 2.14.0],[GLIB2_14_DEFINES="-DGLIB2_14_ENABLED" AC_DEFINE([GLIB2_14_ENABLED],[1],[Define to 1 if you have GLIB 2.14 or higher])],AC_MSG_NOTICE([Using slider for volume]))
AC_SUBST(GLIB2_14_DEFINES)

AC_ARG_WITH([gio],
    [AS_HELP_STRING([--with-gio],
        [Use GIO for file I/O])],
        [],
        [with_gio=check])
AS_IF([test "x$with_gio" != xno], 
    [PKG_CHECK_MODULES(GIO,[gio-2.0],[GIO_DEFINES="-DGIO_ENABLED" AC_DEFINE([GIO_ENABLED],[1],[Define to 1 if you have GIO support])],AC_MSG_WARN([Compiling without gio support]))
    AC_SUBST(GIO_DEFINES)
    AC_SUBST(GIO_CFLAGS)
    AC_SUBST(GIO_LIBS)
    ])
    
PKG_CHECK_MODULES(DBUS, [dbus-1 >= 0.95 dbus-glib-1 >= 0.70])
AC_SUBST(DBUS_CFLAGS)
AC_SUBST(DBUS_LIBS)

PKG_CHECK_MODULES(XSCRNSAVER,[xscrnsaver],[AC_DEFINE([XSCRNSAVER_ENABLED],[1],[When defined we have direct XScrnSaver control])], AC_MSG_WARN([Compiling withou xscrnsaver support]))
AC_SUBST(XSCRNSAVER_CFLAGS)
AC_SUBST(XSCRNSAVER_LIBS)

AC_ARG_WITH([gconf],
    [AS_HELP_STRING([--with-gconf],
        [Use Gconf to store preferences])],
        [AM_CONDITIONAL([GCONF_SCHEMAS_INSTALL],[1])],
        [with_gconf=check])
AS_IF([test "x$with_gconf" != xno],        
    [PKG_CHECK_MODULES(GCONF, [gconf-2.0],[AM_GCONF_SOURCE_2 GCONF_DEFINES="-DHAVE_GCONF" AC_DEFINE([HAVE_GCONF],[1],[Define to 1 to use GConf to store preferences])],[AM_CONDITIONAL([GCONF_SCHEMAS_INSTALL],[1]) AC_MSG_NOTICE([Using keystore for preferences])])
    AC_SUBST(GCONF_DEFINES)
    AC_SUBST(GCONF_CFLAGS)
    AC_SUBST(GCONF_LIBS)
    ])

AC_ARG_WITH([alsa],
    [AS_HELP_STRING([--with-alsa],
        [Read volume from alsa devices])],
        [],
        [with_alsa=check])
AS_IF([test "x$with_alsa" != xno], 
    [PKG_CHECK_MODULES(ALSA, [alsa], [ALSA_DEFINES="-DHAVE_ASOUNDLIB" AC_DEFINE([HAVE_ASOUNDLIB],[1],[Define to 1 if you have asoundlib development packages])],AC_MSG_WARN([Compiling without asound support]))
    AC_SUBST(ALSA_DEFINES)
    AC_SUBST(ALSA_CFLAGS)
    AC_SUBST(ALSA_LIBS)
    ])
    
AC_ARG_WITH([libnotify],
    [AS_HELP_STRING([--with-libnotify],
        [Send notifications of new media])],
        [],
        [with_libnotify=check])
AS_IF([test "x$with_libnotify" != xno], 
    [PKG_CHECK_MODULES(NOTIFY,[libnotify],[NOTIFY_DEFINES="-DNOTIFY_ENABLED" AC_DEFINE([NOTIFY_ENABLED],[1],[Define to 1 if you have NOTIFY support])],AC_MSG_WARN([Compiling without libnotify support]))
    AC_SUBST(NOTIFY_DEFINES)
    AC_SUBST(NOTIFY_CFLAGS)
    AC_SUBST(NOTIFY_LIBS)
    ])

AC_ARG_WITH([libgpod],
    [AS_HELP_STRING([--with-libgpod],
        [Add support for libgpod])],
        [],
        [with_libgpod=check])
AS_IF([test "x$with_libgpod" != xno], 
    [PKG_CHECK_MODULES(GPOD06,[libgpod-1.0 <= 0.6.0],[GPOD_DEFINES="-DHAVE_GPOD -DGPOD_06" AC_DEFINE([GPOD_ENABLED],[1],[Define to 1 if you have gpod support])],AC_MSG_WARN([Compiling without libgpod 0.6.0 support]))
    AC_SUBST(GPOD_DEFINES)
    AC_SUBST(GPOD06_CFLAGS)
    AC_SUBST(GPOD06_LIBS)
    ])

AS_IF([test "x$with_libgpod" != xno], 
    [PKG_CHECK_MODULES(GPOD07,[libgpod-1.0 >= 0.7.0],[GPOD_DEFINES="-DHAVE_GPOD -DGPOD_07" AC_DEFINE([GPOD_ENABLED],[1],[Define to 1 if you have gpod support])],AC_MSG_WARN([Compiling without libgpod 0.7.0 support]))
    AC_SUBST(GPOD_DEFINES)
    AC_SUBST(GPOD07_CFLAGS)
    AC_SUBST(GPOD07_LIBS)
    ])
    
GPOD_CFLAGS="$GPOD06_CFLAGS $GPOD07_CFLAGS"
GPOD_LIBS="$GPOD06_LIBS $GPOD07_LIBS"    
AC_SUBST(GPOD_CFLAGS)
AC_SUBST(GPOD_LIBS)    
    
AC_ARG_WITH([libmusicbrainz3],
    [AS_HELP_STRING([--with-libmusicbrainz3],
        [Add support for libmusicbrainz3])],
        [],
        [with_libmusicbrainz3=check])
AS_IF([test "x$with_libmusicbrainz3" != xno], 
    [PKG_CHECK_MODULES(MUSICBRAINZ,[libmusicbrainz3 libcurl],[MUSICBRAINZ_DEFINES="-DHAVE_MUSICBRAINZ" AC_DEFINE([MUSICBRAINZ_ENABLED],[1],[Define to 1 if you have musicbrainz3 support])],AC_MSG_WARN([Compiling without libmusicbrainz3 support]))
    AC_SUBST(MUSICBRAINZ_DEFINES)
    AC_SUBST(MUSICBRAINZ_CFLAGS)
    AC_SUBST(MUSICBRAINZ_LIBS)
    ])    

AC_ARG_ENABLE(nautilus,
        AC_HELP_STRING([--enable-nautilus],[compile the nautilus plugin]),
        [case "${enableval}" in
        yes) ENABLE_NAUTILUS=yes ;;
        no) ENABLE_NAUTILUS=no ;;
        *) AC_MSG_ERROR(bad value ${enableval} for --enable-nautilus) ;;
        esac],
        [ENABLE_NAUTILUS=yes]) dnl Default value

if test x$ENABLE_NAUTILUS = "xyes" ; then
        PKG_CHECK_MODULES(NAUTILUS, libnautilus-extension,
                        [HAVE_NAUTILUS=yes], [HAVE_NAUTILUS=no])
fi

AC_SUBST(NAUTILUS_CFLAGS)
AC_SUBST(NAUTILUS_LIBS)
if test x$HAVE_NAUTILUS = "xyes"; then
        AC_DEFINE(HAVE_NAUTILUS, 1, [defined if you build the nautilus plugin])
        NAUTILUSDIR=`pkg-config --variable=extensiondir libnautilus-extension`
        AC_SUBST(NAUTILUSDIR)
fi
AM_CONDITIONAL(HAVE_NAUTILUS, test x$HAVE_NAUTILUS = "xyes")

AC_ARG_ENABLE(panscan,
        AC_HELP_STRING([--enable-panscan],[Enable panscan functionality (requires mplayer svn r29565 or higher)]),
        [case "${enableval}" in
        yes) ENABLE_PANSCAN=yes ;;
        no) ENABLE_PANSCAN=no ;;
        *) AC_MSG_ERROR(bad value ${enableval} for --enable-panscan) ;;
        esac],
        [ENABLE_PANSCAN=no]) dnl Default value

if test x$ENABLE_PANSCAN = "xyes"; then
        AC_DEFINE(ENABLE_PANSCAN, 1, [defined enable panscan functionality])
fi

FLATVOL=FALSE
CHECK_FLAT=yes
AC_ARG_WITH([flat-volume],
        [AS_HELP_STRING([--with-flat-volume],
        [Use pulse audio flat volume feature (Autodetected)])],
        [CHECK_FLAT=no 
        case "${withval}" in
        yes) FLATVOL=TRUE;;
        no) FLATVOL=FALSE;;
        esac],
        [])
        
if test x$CHECK_FLAT = "xyes"; then
    if test -x `which pulseaudio`; then
            AC_MSG_NOTICE([Checking for flat audio support])
            PAVER=`pulseaudio --version | sed -e 's/pulseaudio 0.9.//'`
            if test $PAVER -gt 14; then
                FLATVOL=TRUE
            fi
    fi
fi
AC_SUBST(FLATVOL)

CHECK_GPM=yes
AC_DEFINE(SM_INHIBIT, 0, [Disabled])
AC_DEFINE(SS_INHIBIT, 0, [Disabled])

AC_ARG_WITH([gpm-new-method],
        [AS_HELP_STRING([--with-gpm-new-method],
        [Use gnome-power-manager 2.26 or higher inhibit methods (Autodetected)])],
        [CHECK_GPM=no AC_DEFINE(SM_INHIBIT, 1, [Defined if you are using gnome-power-manager 2.26 or higher])],
        [])
AC_ARG_WITH([gpm-old-method],
        [AS_HELP_STRING([--with-gpm-old-method],
        [Use gnome-power-manager below 2.26 inhibit methods (Autodetected)])],
        [CHECK_GPM=no AC_DEFINE(SS_INHIBIT, 1, [Defined if you are using gnome-power-manager below 2.26])],
        [])

if test x$CHECK_GPM = "xyes"; then
    if test -x `which gnome-power-manager`; then
            AC_MSG_NOTICE([Checking for gnome-power-manager support])
            GPMVER=`gnome-power-manager --version | sed -e 's/.* 2.//' | cut -b1-2`
            if test $GPMVER -ge 26; then
                AC_DEFINE(SM_INHIBIT, 1, [Defined if you are using gnome-power-manager 2.26 or higher])
            fi
            if test $GPMVER -lt 26; then
                AC_DEFINE(SS_INHIBIT, 1, [Defined if you are using gnome-power-manager below 2.26 ])
            fi
            
    fi
fi

AC_CHECK_HEADERS([mntent.h])
AC_OUTPUT([
Makefile
icons/Makefile
icons/16x16/Makefile
icons/22x22/Makefile
icons/24x24/Makefile
icons/32x32/Makefile
icons/48x48/Makefile
icons/scalable/Makefile
src/Makefile
src/libgmtk/Makefile
src/libgmlib/Makefile
po/Makefile.in
gnome-mplayer.spec
gnome-mplayer.schemas
])
